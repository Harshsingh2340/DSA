#include <stdio.h>
#include <stdlib.h>

typedef struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

TreeNode* createNode(int value) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

TreeNode* insertAtEnd(TreeNode* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (root->left == NULL) {
        root->left = insertAtEnd(root->left, value);
    } else {
        root->right = insertAtEnd(root->right, value);
    }
    return root;
}

TreeNode* insertAtStart(TreeNode* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    TreeNode* newNode = createNode(value);
    newNode->left = root;
    return newNode;
}

TreeNode* insertAtMiddle(TreeNode* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    TreeNode* leftSubtree = root->left;
    TreeNode* rightSubtree = root->right;

    TreeNode* newNode = createNode(value);
    newNode->left = leftSubtree;
    root->left = NULL;
    root->right = NULL;
    newNode->right = root;
    newNode->right->left = rightSubtree;
    return newNode;
}

void inorderTraversal(TreeNode* root) {
    if (root == NULL) {
        return;
    }
    inorderTraversal(root->left);
    printf("%d ", root->data);
    inorderTraversal(root->right);
}

void freeTree(TreeNode* root) {
    if (root == NULL) {
        return;
    }
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}

int main() {
    TreeNode* root = NULL;

    root = insertAtEnd(root, 50);
    insertAtEnd(root, 30);
    insertAtEnd(root, 70);
    insertAtStart(root, 10);
    insertAtStart(root, 5);
    root = insertAtMiddle(root, 20);
    insertAtMiddle(root, 40);

    printf("Inorder Traversal: ");
    inorderTraversal(root);
    printf("\n");

    freeTree(root);
    return 0;
}
