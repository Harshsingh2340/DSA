#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_VERTICES 100

typedef struct Edge {
    int source;
    int destination;
} Edge;

typedef struct Graph {
    int numVertices;
    int numEdges;
    bool isDirected;
    int adjacencyMatrix[MAX_VERTICES][MAX_VERTICES];
} Graph;

Graph* createGraph(int numVertices, bool isDirected) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = numVertices;
    graph->numEdges = 0;
    graph->isDirected = isDirected;

    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            graph->adjacencyMatrix[i][j] = 0;
        }
    }

    return graph;
}

void addEdge(Graph* graph, int source, int destination) {
    if (source < 0 || source >= graph->numVertices ||
        destination < 0 || destination >= graph->numVertices) {
        printf("Invalid vertex!\n");
        return;
    }

    if (graph->adjacencyMatrix[source][destination] == 1) {
        printf("Edge already exists!\n");
        return;
    }

    graph->adjacencyMatrix[source][destination] = 1;
    if (!graph->isDirected) {
        graph->adjacencyMatrix[destination][source] = 1;
    }

    graph->numEdges++;
}

void removeEdge(Graph* graph, int source, int destination) {
    if (source < 0 || source >= graph->numVertices ||
        destination < 0 || destination >= graph->numVertices) {
        printf("Invalid vertex!\n");
        return;
    }

    if (graph->adjacencyMatrix[source][destination] == 0) {
        printf("Edge does not exist!\n");
        return;
    }

    graph->adjacencyMatrix[source][destination] = 0;
    if (!graph->isDirected) {
        graph->adjacencyMatrix[destination][source] = 0;
    }

    graph->numEdges--;
}

void displayGraph(Graph* graph) {
    printf("Graph Adjacency Matrix:\n");
    for (int i = 0; i < graph->numVertices; i++) {
        for (int j = 0; j < graph->numVertices; j++) {
            printf("%d ", graph->adjacencyMatrix[i][j]);
        }
        printf("\n");
    }
}

void freeGraph(Graph* graph) {
    free(graph);
}

int main() {
    int numVertices = 5;
    bool isDirected = false;

    Graph* graph = createGraph(numVertices, isDirected);

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    displayGraph(graph);

    removeEdge(graph, 0, 2);

    displayGraph(graph);

    freeGraph(graph);
    return 0;
}

