#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_VERTICES 100

typedef struct Edge {
    int source;
    int destination;
    int weight;
} Edge;

typedef struct Graph {
    int numVertices;
    int numEdges;
    bool isDirected;
    int adjacencyMatrix[MAX_VERTICES][MAX_VERTICES];
} Graph;

typedef struct QueueNode {
    int vertex;
    struct QueueNode* next;
} QueueNode;

typedef struct Queue {
    QueueNode* front;
    QueueNode* rear;
} Queue;

Graph* createGraph(int numVertices, bool isDirected) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = numVertices;
    graph->numEdges = 0;
    graph->isDirected = isDirected;

    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            graph->adjacencyMatrix[i][j] = 0;
        }
    }

    return graph;
}

void addEdge(Graph* graph, int source, int destination, int weight) {
    if (source < 0 || source >= graph->numVertices ||
        destination < 0 || destination >= graph->numVertices) {
        printf("Invalid vertex!\n");
        return;
    }

    graph->adjacencyMatrix[source][destination] = weight;
    if (!graph->isDirected) {
        graph->adjacencyMatrix[destination][source] = weight;
    }

    graph->numEdges++;
}

void removeEdge(Graph* graph, int source, int destination) {
    if (source < 0 || source >= graph->numVertices ||
        destination < 0 || destination >= graph->numVertices) {
        printf("Invalid vertex!\n");
        return;
    }

    graph->adjacencyMatrix[source][destination] = 0;
    if (!graph->isDirected) {
        graph->adjacencyMatrix[destination][source] = 0;
    }

    graph->numEdges--;
}

void displayGraph(Graph* graph) {
    printf("Graph Adjacency Matrix:\n");
    for (int i = 0; i < graph->numVertices; i++) {
        for (int j = 0; j < graph->numVertices; j++) {
            printf("%d ", graph->adjacencyMatrix[i][j]);
        }
        printf("\n");
    }
}

void freeGraph(Graph* graph) {
    free(graph);
}

Queue* createQueue() {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->front = NULL;
    queue->rear = NULL;
    return queue;
}

bool isQueueEmpty(Queue* queue) {
    return queue->front == NULL;
}

void enqueue(Queue* queue, int vertex) {
    QueueNode* newNode = (QueueNode*)malloc(sizeof(QueueNode));
    newNode->vertex = vertex;
    newNode->next = NULL;

    if (queue->rear == NULL) {
        queue->front = newNode;
        queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
}

int dequeue(Queue* queue) {
    if (isQueueEmpty(queue)) {
        return -1; // Or any suitable error value
    }

    int vertex = queue->front->vertex;
    QueueNode* temp = queue->front;

    if (queue->front == queue->rear) {
        queue->front = NULL;
        queue->rear = NULL;
    } else {
        queue->front = queue->front->next;
    }

    free(temp);
    return vertex;
}

void freeQueue(Queue* queue) {
    while (!isQueueEmpty(queue)) {
        dequeue(queue);
    }
    free(queue);
}

void breadthFirstSearch(Graph* graph, int startVertex) {
    if (startVertex < 0 || startVertex >= graph->numVertices) {
        printf("Invalid starting vertex!\n");
        return;
    }

    bool visited[MAX_VERTICES] = { false };
    Queue* queue = createQueue();

    visited[startVertex] = true;
    enqueue(queue, startVertex);

    printf("Breadth-First Search: ");
    while (!isQueueEmpty(queue)) {
        int vertex = dequeue(queue);
        printf("%d ", vertex);

        for (int i = 0; i < graph->numVertices; i++) {
            if (graph->adjacencyMatrix[vertex][i] != 0 && !visited[i]) {
                visited[i] = true;
                enqueue(queue, i);
            }
        }
    }
    printf("\n");

    freeQueue(queue);
}

void depthFirstSearchUtil(Graph* graph, int vertex, bool visited[]) {
    visited[vertex] = true;
    printf("%d ", vertex);

    for (int i = 0; i < graph->numVertices; i++) {
        if (graph->adjacencyMatrix[vertex][i] != 0 && !visited[i]) {
            depthFirstSearchUtil(graph, i, visited);
        }
    }
}

void depthFirstSearch(Graph* graph, int startVertex) {
    if (startVertex < 0 || startVertex >= graph->numVertices) {
        printf("Invalid starting vertex!\n");
        return;
    }

    bool visited[MAX_VERTICES] = { false };

    printf("Depth-First Search: ");
    depthFirstSearchUtil(graph, startVertex, visited);
    printf("\n");
}

void dijkstra(Graph* graph, int startVertex) {
    if (startVertex < 0 || startVertex >= graph->numVertices) {
        printf("Invalid starting vertex!\n");
        return;
    }

    int dist[MAX_VERTICES];
    bool visited[MAX_VERTICES] = { false };

    for (int i = 0; i < graph->numVertices; i++) {
        dist[i] = INT_MAX;
    }

    dist[startVertex] = 0;

    for (int count = 0; count < graph->numVertices - 1; count++) {
        int u = -1;

        for (int i = 0; i < graph->numVertices; i++) {
            if (!visited[i] && (u == -1 || dist[i] < dist[u])) {
                u = i;
            }
        }

        visited[u] = true;

        for (int v = 0; v < graph->numVertices; v++) {
            if (graph->adjacencyMatrix[u][v] != 0 && !visited[v]) {
                int newDist = dist[u] + graph->adjacencyMatrix[u][v];
                if (newDist < dist[v]) {
                    dist[v] = newDist;
                }
            }
        }
    }

    printf("Dijkstra's Shortest Path from vertex %d:\n", startVertex);
    for (int i = 0; i < graph->numVertices; i++) {
        printf("Vertex %d: %d\n", i, dist[i]);
    }
}

void primMST(Graph* graph) {
    int parent[MAX_VERTICES];
    int key[MAX_VERTICES];
    bool mstSet[MAX_VERTICES] = { false };

    for (int i = 0; i < graph->numVertices; i++) {
        key[i] = INT_MAX;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < graph->numVertices - 1; count++) {
        int u = -1;

        for (int i = 0; i < graph->numVertices; i++) {
            if (!mstSet[i] && (u == -1 || key[i] < key[u])) {
                u = i;
            }
        }

        mstSet[u] = true;

        for (int v = 0; v < graph->numVertices; v++) {
            if (graph->adjacencyMatrix[u][v] != 0 && !mstSet[v] && graph->adjacencyMatrix[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph->adjacencyMatrix[u][v];
            }
        }
    }

    printf("Minimum Spanning Tree (Prim's Algorithm):\n");
    for (int i = 1; i < graph->numVertices; i++) {
        printf("Edge: %d - %d, Weight: %d\n", parent[i], i, graph->adjacencyMatrix[i][parent[i]]);
    }
}

int main() {
    int numVertices = 5;
    bool isDirected = false;

    Graph* graph = createGraph(numVertices, isDirected);

    addEdge(graph, 0, 1, 10);
    addEdge(graph, 0, 2, 6);
    addEdge(graph, 1, 2, 3);
    addEdge(graph, 1, 3, 15);
    addEdge(graph, 2, 3, 4);
    addEdge(graph, 3, 4, 8);
    addEdge(graph, 2, 4, 7);

    displayGraph(graph);

    breadthFirstSearch(graph, 0);
    depthFirstSearch(graph, 0);

    dijkstra(graph, 0);
    primMST(graph);

    freeGraph(graph);
    return 0;
}
